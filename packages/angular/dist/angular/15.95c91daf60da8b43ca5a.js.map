{"version":3,"sources":["webpack:///../react/node_modules/monaco-editor/esm/vs/basic-languages/dockerfile/dockerfile.js.pre-build-optimizer.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","brackets","autoClosingPairs","open","close","surroundingPairs","defaultToken","tokenPostfix","variable","tokenizer","root","include","token","next","arguments","cases","@eos","@default","whitespace","comment","strings","stringBody","dblStringBody"],"mappings":"4FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAKO,IAAID,EAAO,CACdE,SAAU,CACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MAEVC,iBAAkB,CACd,CAAEC,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAMC,MAAO,MAEzBC,iBAAkB,CACd,CAAEF,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAMC,MAAO,OAGlBJ,EAAW,CAClBM,aAAc,GACdC,aAAc,cACdC,SAAU,cACVC,UAAW,CACPC,KAAM,CACF,CAAEC,QAAS,eACX,CAAEA,QAAS,YACX,CAAC,iBAAkB,CAAC,UAAW,KAC/B,CAAC,oBAAqB,CAAC,UAAW,GAAI,CAAEC,MAAO,WAAYC,KAAM,gBACjE,CAAC,sHAAuH,CAAED,MAAO,UAAWC,KAAM,gBAEtJC,UAAW,CACP,CAAEH,QAAS,eACX,CAAEA,QAAS,YACX,CAAC,cAAe,CACRI,MAAO,CACHC,OAAQ,CAAEJ,MAAO,WAAYC,KAAM,WACnCI,WAAY,cAGxB,CAAC,KAAM,CACCF,MAAO,CACHC,OAAQ,GACRC,WAAY,MAGxB,CAAC,IAAK,CACEF,MAAO,CACHC,OAAQ,CAAEJ,MAAO,GAAIC,KAAM,WAC3BI,WAAY,OAK5BC,WAAY,CACR,CAAC,MAAO,CACAH,MAAO,CACHC,OAAQ,CAAEJ,MAAO,GAAIC,KAAM,WAC3BI,WAAY,OAI5BE,QAAS,CACL,CAAC,UAAW,UAAW,YAG3BC,QAAS,CACL,CAAC,KAAM,SAAU,WACjB,CAAC,IAAK,SAAU,eAChB,CAAC,KAAM,SAAU,WACjB,CAAC,IAAK,SAAU,mBAEpBC,WAAY,CACR,CAAC,WAAY,CACLN,MAAO,CACHC,OAAQ,CAAEJ,MAAO,SAAUC,KAAM,WACjCI,WAAY,YAGxB,CAAC,MAAO,iBACR,CAAC,KAAM,SAAU,WACjB,CAAC,IAAK,SAAU,QAChB,CAAC,cAAe,YAChB,CAAC,MAAO,UACR,CAAC,IAAK,SAAU,YAEpBK,cAAe,CACX,CAAC,WAAY,CACLP,MAAO,CACHC,OAAQ,CAAEJ,MAAO,SAAUC,KAAM,WACjCI,WAAY,YAGxB,CAAC,MAAO,iBACR,CAAC,KAAM,SAAU,WACjB,CAAC,IAAK,SAAU,QAChB,CAAC,cAAe,YAChB,CAAC,MAAO,UACR,CAAC,IAAK,SAAU","file":"15.95c91daf60da8b43ca5a.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.dockerfile',\n    variable: /\\${?[\\w]+}?/,\n    tokenizer: {\n        root: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            [/(ONBUILD)(\\s+)/, ['keyword', '']],\n            [/(ENV)(\\s+)([\\w]+)/, ['keyword', '', { token: 'variable', next: '@arguments' }]],\n            [/(FROM|MAINTAINER|RUN|EXPOSE|ENV|ADD|ARG|VOLUME|LABEL|USER|WORKDIR|COPY|CMD|STOPSIGNAL|SHELL|HEALTHCHECK|ENTRYPOINT)/, { token: 'keyword', next: '@arguments' }]\n        ],\n        arguments: [\n            { include: '@whitespace' },\n            { include: '@strings' },\n            [/(@variable)/, {\n                    cases: {\n                        '@eos': { token: 'variable', next: '@popall' },\n                        '@default': 'variable'\n                    }\n                }],\n            [/\\\\/, {\n                    cases: {\n                        '@eos': '',\n                        '@default': ''\n                    }\n                }],\n            [/./, {\n                    cases: {\n                        '@eos': { token: '', next: '@popall' },\n                        '@default': ''\n                    }\n                }],\n        ],\n        // Deal with white space, including comments\n        whitespace: [\n            [/\\s+/, {\n                    cases: {\n                        '@eos': { token: '', next: '@popall' },\n                        '@default': ''\n                    }\n                }],\n        ],\n        comment: [\n            [/(^#.*$)/, 'comment', '@popall']\n        ],\n        // Recognize strings, including those broken across lines with \\ (but not without)\n        strings: [\n            [/'$/, 'string', '@popall'],\n            [/'/, 'string', '@stringBody'],\n            [/\"$/, 'string', '@popall'],\n            [/\"/, 'string', '@dblStringBody']\n        ],\n        stringBody: [\n            [/[^\\\\\\$']/, {\n                    cases: {\n                        '@eos': { token: 'string', next: '@popall' },\n                        '@default': 'string'\n                    }\n                }],\n            [/\\\\./, 'string.escape'],\n            [/'$/, 'string', '@popall'],\n            [/'/, 'string', '@pop'],\n            [/(@variable)/, 'variable'],\n            [/\\\\$/, 'string'],\n            [/$/, 'string', '@popall']\n        ],\n        dblStringBody: [\n            [/[^\\\\\\$\"]/, {\n                    cases: {\n                        '@eos': { token: 'string', next: '@popall' },\n                        '@default': 'string'\n                    }\n                }],\n            [/\\\\./, 'string.escape'],\n            [/\"$/, 'string', '@popall'],\n            [/\"/, 'string', '@pop'],\n            [/(@variable)/, 'variable'],\n            [/\\\\$/, 'string'],\n            [/$/, 'string', '@popall']\n        ]\n    }\n};\n"],"sourceRoot":""}