{"version":3,"sources":["webpack:///../react/node_modules/monaco-editor/esm/vs/basic-languages/csharp/csharp.js.pre-build-optimizer.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","token","keywords","namespaceFollows","parenFollows","operators","symbols","escapes","tokenizer","root","cases","@namespaceFollows","next","@keywords","@default","include","$S2==interpolatedstring","$S2==litinterpstring","@operators","qualified","namespace","comment","string","litstring","litinterpstring","interpolatedstring","whitespace"],"mappings":"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","file":"12.13748d1347c7d7b2c7b7.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/'],\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')'],\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>' },\n        { open: '\\'', close: '\\'' },\n        { open: '\"', close: '\"' },\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*#region\\\\b\"),\n            end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.cs',\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    keywords: [\n        'extern', 'alias', 'using', 'bool', 'decimal', 'sbyte', 'byte', 'short',\n        'ushort', 'int', 'uint', 'long', 'ulong', 'char', 'float', 'double',\n        'object', 'dynamic', 'string', 'assembly', 'is', 'as', 'ref',\n        'out', 'this', 'base', 'new', 'typeof', 'void', 'checked', 'unchecked',\n        'default', 'delegate', 'var', 'const', 'if', 'else', 'switch', 'case',\n        'while', 'do', 'for', 'foreach', 'in', 'break', 'continue', 'goto',\n        'return', 'throw', 'try', 'catch', 'finally', 'lock', 'yield', 'from',\n        'let', 'where', 'join', 'on', 'equals', 'into', 'orderby', 'ascending',\n        'descending', 'select', 'group', 'by', 'namespace', 'partial', 'class',\n        'field', 'event', 'method', 'param', 'property', 'public', 'protected',\n        'internal', 'private', 'abstract', 'sealed', 'static', 'struct', 'readonly',\n        'volatile', 'virtual', 'override', 'params', 'get', 'set', 'add', 'remove',\n        'operator', 'true', 'false', 'implicit', 'explicit', 'interface', 'enum',\n        'null', 'async', 'await', 'fixed', 'sizeof', 'stackalloc', 'unsafe', 'nameof',\n        'when'\n    ],\n    namespaceFollows: [\n        'namespace', 'using',\n    ],\n    parenFollows: [\n        'if', 'for', 'while', 'switch', 'foreach', 'using', 'catch', 'when'\n    ],\n    operators: [\n        '=', '??', '||', '&&', '|', '^', '&', '==', '!=', '<=', '>=', '<<',\n        '+', '-', '*', '/', '%', '!', '~', '++', '--', '+=',\n        '-=', '*=', '/=', '%=', '&=', '|=', '^=', '<<=', '>>=', '>>', '=>'\n    ],\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    // escape sequences\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [/\\@?[a-zA-Z_]\\w*/, {\n                    cases: {\n                        '@namespaceFollows': { token: 'keyword.$0', next: '@namespace' },\n                        '@keywords': { token: 'keyword.$0', next: '@qualified' },\n                        '@default': { token: 'identifier', next: '@qualified' }\n                    }\n                }],\n            // whitespace\n            { include: '@whitespace' },\n            // delimiters and operators\n            [/}/, {\n                    cases: {\n                        '$S2==interpolatedstring': { token: 'string.quote', next: '@pop' },\n                        '$S2==litinterpstring': { token: 'string.quote', next: '@pop' },\n                        '@default': '@brackets'\n                    }\n                }],\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [/@symbols/, {\n                    cases: {\n                        '@operators': 'delimiter',\n                        '@default': ''\n                    }\n                }],\n            // numbers\n            [/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?[fFdD]?/, 'number.float'],\n            [/0[xX][0-9a-fA-F_]+/, 'number.hex'],\n            [/0[bB][01_]+/, 'number.hex'],\n            [/[0-9_]+/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, { token: 'string.quote', next: '@string' }],\n            [/\\$\\@\"/, { token: 'string.quote', next: '@litinterpstring' }],\n            [/\\@\"/, { token: 'string.quote', next: '@litstring' }],\n            [/\\$\"/, { token: 'string.quote', next: '@interpolatedstring' }],\n            // characters\n            [/'[^\\\\']'/, 'string'],\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n            [/'/, 'string.invalid']\n        ],\n        qualified: [\n            [/[a-zA-Z_][\\w]*/, {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': 'identifier'\n                    }\n                }],\n            [/\\./, 'delimiter'],\n            ['', '', '@pop'],\n        ],\n        namespace: [\n            { include: '@whitespace' },\n            [/[A-Z]\\w*/, 'namespace'],\n            [/[\\.=]/, 'delimiter'],\n            ['', '', '@pop'],\n        ],\n        comment: [\n            [/[^\\/*]+/, 'comment'],\n            // [/\\/\\*/,    'comment', '@push' ],    // no nested comments :-(\n            ['\\\\*/', 'comment', '@pop'],\n            [/[\\/*]/, 'comment']\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, { token: 'string.quote', next: '@pop' }]\n        ],\n        litstring: [\n            [/[^\"]+/, 'string'],\n            [/\"\"/, 'string.escape'],\n            [/\"/, { token: 'string.quote', next: '@pop' }]\n        ],\n        litinterpstring: [\n            [/[^\"{]+/, 'string'],\n            [/\"\"/, 'string.escape'],\n            [/{{/, 'string.escape'],\n            [/}}/, 'string.escape'],\n            [/{/, { token: 'string.quote', next: 'root.litinterpstring' }],\n            [/\"/, { token: 'string.quote', next: '@pop' }]\n        ],\n        interpolatedstring: [\n            [/[^\\\\\"{]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/{{/, 'string.escape'],\n            [/}}/, 'string.escape'],\n            [/{/, { token: 'string.quote', next: 'root.interpolatedstring' }],\n            [/\"/, { token: 'string.quote', next: '@pop' }]\n        ],\n        whitespace: [\n            [/^[ \\t\\v\\f]*#((r)|(load))(?=\\s)/, 'directive.csx'],\n            [/^[ \\t\\v\\f]*#\\w.*$/, 'namespace.cpp'],\n            [/[ \\t\\v\\f\\r\\n]+/, ''],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment'],\n        ],\n    },\n};\n"],"sourceRoot":""}